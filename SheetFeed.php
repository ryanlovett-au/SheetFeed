<?php

/* 
	SheetFeed - Google Sheets to ATOM feed generator
    Copyright (C) 2017 Ryan Lovett ryan.lovett@skerric.com.au

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


// Configuration

$config['time_zone'] = 'Australia/Sydney';		// Enter you local timezone	 
$config['cache_directory'] = 'cache/';			// The cache directory must be writeable by your webserver
$config['timeout'] = 300;						// The time to live, in seconds, for a cached copy of a particular sheet, designed to stop spamming of Google
$config['phpspreadsheet_directory'] = 'Prerequisites/';		// The parent directory containing PhpSreadsheet, leave blank if in same directory as SheetFeed.php
$config['feedwrite_directory'] = 'Prerequisites/';			// The parent directory containing feedwriter, leave blank if in same directory as SheetFeed.php

$config['feed_title'] = 'SheetFeed - Google Sheets to ATOM';
$config['feed_description'] = 'This feed has been dynamically generated by the content of a Google sheet.';
$config['feed_link'] = 'http://sheets.google.com';		// Must include http:// or https://
	


// Get the important bits

if (isset($_GET['google']) && isset($_GET['sheet']))
	{
		if (strlen($_GET['google']) == 44)
			{
				$g_ref = htmlspecialchars($_GET['google']);
				$g_sheet = htmlspecialchars($_GET['sheet']);
			}
		else
			{
				echo "You must supply a google sheets reference and sheet name<br>"; 
				echo strlen($_GET['google'])."<br>";
				echo "Your google sheets reference appers to be incorrect<br>";
			}
		
	}
else
	{ 
		echo "You must supply a google sheets reference and sheet name<br>"; 
		echo "<br>";
		echo "&google= google spreadsheet reference<br>";
		echo "&sheet= sheet name<br>";
		echo "&title= column of post title (A)<br>";
		echo "&content= column of post content (B)<br>";
		echo "&start= column of date to start posting (C)<br>";
		echo "&end= column of date to stop posting (D)<br>";
		echo "&author= column of post author (E)<br>";
		echo "&end= column of date to stop posting (F)<br>";
		echo "&header= row of header cells to ignore, set 0 for no header (1)<br>";
		
		exit; 
	}

if (isset($_GET['title']))
	{ $g_title = htmlspecialchars($_GET['title']); }	// column of post title
else
	{ $g_title = 'A'; }

if (isset($_GET['content']))
	{ $g_content = htmlspecialchars($_GET['content']); }	// column of post content
else
	{ $g_content = 'B'; }

if (isset($_GET['author']))
	{ $g_author = htmlspecialchars($_GET['author']); }	// column of post author
else
	{ $g_author = 'E'; }

if (isset($_GET['start']))
	{ $g_start = htmlspecialchars($_GET['start']); }	// column of not before
else
	{ $g_start = 'C'; }

if (isset($_GET['end']))
	{ $g_end = htmlspecialchars($_GET['end']); }	// column of not after
else
	{ $g_end = 'D'; }

if (isset($_GET['header']))
	{ $g_header = htmlspecialchars($_GET['header']); }	// row of headers
else
	{ $g_header = 1; }
	

// Download the file (maybe)

if (file_exists($config['cache_directory'].$g_ref.'.xlsx') && filemtime($config['cache_directory'].$g_ref.'.xlsx') > (time() - $config['timeout']))
	{ /* do nothing */ }
else
	{
		// re-download file
		file_put_contents($config['cache_directory'].$g_ref.'.xlsx', fopen('https://docs.google.com/spreadsheets/d/'.$g_ref.'/pub?output=xlsx', 'r'));
	}


// Open the file	
	
require $config['phpspreadsheet_directory'].'PhpSpreadsheet/src/Bootstrap.php';

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\IOFactory;

$inputFileName = $config['cache_directory'].$g_ref.'.xlsx';

$inputFileType = \PhpOffice\PhpSpreadsheet\IOFactory::identify($inputFileName);
$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader($inputFileType);

$fullsheet = $reader->load($inputFileName);
$data = $fullsheet->getSheetByName($g_sheet)->toArray();


// Create the feed

include $config['feedwrite_directory'].'FeedWriter/Item.php';
include $config['feedwrite_directory'].'FeedWriter/Feed.php';
include $config['feedwrite_directory'].'FeedWriter/ATOM.php';
include $config['feedwrite_directory'].'FeedWriter/InvalidOperationException.php';


// Build col_refs[] array
$y = 0;
for ($x = 'A'; ; $x++)
{
	$col_ref[$x] = $y;
	$y++;
	if ($x == 'Z') { break; }
}


// Go

date_default_timezone_set($config['time_zone']);

use \FeedWriter\ATOM;

$feed = new ATOM();

$feed->setTitle($config['feed_title']);
$feed->setDescription($config['feed_description']);
$feed->setLink($config['feed_link']);
$feed->setDate(new DateTime());

$i = 1;

foreach ($data as $row)
	{
		if ($i <= $g_header) 
			{ $i++; continue; }
		
		if (isset($row[$col_ref[$g_start]])) { $fixed_start = str_replace('/', '-', $row[$col_ref[$g_start]]); } else { $fixed_start = date('Y-m-d H:i:s'); }
		if (isset($row[$col_ref[$g_end]])) { $fixed_end = str_replace('/', '-', $row[$col_ref[$g_end]]); } else { $fixed_end = 'nil'; }
		
		if (strtotime($fixed_start) > time()) { continue; }
		if ($fixed_end != 'nil') { if (strtotime($fixed_end) < time()) { continue; } }

		if ($row[$col_ref[$g_title]] != '') { $title = $row[$col_ref[$g_title]]; } else { $title = '.'; }
		if ($row[$col_ref[$g_author]] != '') { $author = $row[$col_ref[$g_author]]; } else { $author = '.'; }
		if ($row[$col_ref[$g_content]] != '') { $content = $row[$col_ref[$g_content]]; } else { $content = '.'; }

		$item = $feed->createNewItem();	
		$item->setTitle($title);
		$item->setLink($config['feed_link']);
		$item->setDate(strtotime($fixed_start));
		$item->setAuthor($author);
		
		$item->setContent($content);
		
		$feed->addItem($item);
		
		$i++;
	} 

$feed->printFeed();

?>